//////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file      min.h
/// @ingroup   Min values
/// @author    Adrian Cojocari
/// @date      31/01/2024
/// @brief     Insert here a short description
///
/// @copyright Copyright (C) Insert Here All Rights Reserved.
//////////////////////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <algorithm>

//////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief Class that perform different operations all bassed on minimum values.
///
/// @ingroup   min_values
//////////////////////////////////////////////////////////////////////////////////////////////////////

class Min{

    public:
    template < typename T >
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Function compares three different numbers
    /// @param[in] n1 first number to be compared
    /// @param[in] n2 second number to be compared
    /// @param[in] n3 third number to be compared
    /// 
    /// @return minimum from given numbers
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    T getMin(T n1, T n2, T n3)
    {
        T minNr = std::min(n1,n2);
        return std::min(minNr,n3);
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Function sort a given array in asceding order
    /// @param[in,out] array to be sorted
    /// @param[in] size of array
    /// @return None
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    void sortArrayAsc(int *arr, int size);

    //////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Function get's minimum value from an array
    /// @param[in,out] array to be sorted
    /// @param[in] size of array
    /// @return int minimum value
    int getMinVal(int *arr, int size);
};