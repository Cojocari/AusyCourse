Install boost Library : 
https://www.baeldung.com/linux/boost-install-on-ubuntu

Install lcov : 
sudo apt-get update
sudo apt-get install lcov

Some example of boost test functions : 
https://live.boost.org/doc/libs/1_32_0/libs/test/doc/components/test_tools/reference/


DOcs : 
https://www.boost.org/doc/libs/1_83_0/libs/test/doc/html/index.html


COVERAGE :
g++ main.cpp --coverage


Add coverage option to build:
Step 1 : 
    Copy https://github.com/bilke/cmake-modules/blob/master/CodeCoverage.cmake to my_build_dir
Step 2 :

    Copy CodeCoverage.cmake into my sbuild folder
    Add the following to my CMakeLists.txt:

    if (CMAKE_BUILD_TYPE STREQUAL "Coverage")
            include(CodeCoverage)
            append_coverage_compiler_flags()
    endif() 
        Note : the if statement is optional.

Step 3 : 

    Run cmake -DCMAKE_BUILD_TYPE=Coverage

    Run make

Lcov commands to generate coverage : 

lcov --capture --directory . --output-file ./coverage.info --no-external

lcov --remove coverage.info -o coverage_filtered.info \
    '/usr/*'

genhtml --demangle-cpp coverage_filtered.info --output-directory lcov

Explanation : 

    lcov --capture --directory . --output-file ./coverage.info --no-external

        --capture: This option instructs lcov to capture coverage data.
        --directory .: This specifies the directory from which to capture coverage data. Here, . represents the current directory.
        --output-file ./coverage.info: This specifies the output file where the coverage information will be stored. In this case, it will be stored in a file named coverage.info in the current directory.
        --no-external: This option tells lcov not to capture coverage data for external 

    So, this command captures coverage data for the files in the current directory, excluding external files, and stores the information in a file named coverage.info.

    lcov --remove coverage.info -o coverage_filtered.info \
        '/usr/*'

        --remove coverage.info: This option instructs lcov to remove certain data from the coverage report file named coverage.info. This data removal is based on specific criteria provided in the command.
        -o coverage_filtered.info: This option specifies the name of the output file where the filtered coverage information will be stored. In this case, it will be stored in a file named coverage_filtered.info.
        '/usr/*': This is a pattern used to specify which data should be removed from the coverage report. In this pattern, /usr/* is a wildcard expression that matches any file path starting with /usr/. The intention here seems to be to remove coverage information related to files located in the /usr/ directory or its subdirectories.

    So, putting it all together, this command takes the coverage report file coverage.info, removes coverage data related to files in the /usr/ directory or its subdirectories, and stores the filtered coverage information in a new file named coverage_filtered.info.

    genhtml --demangle-cpp coverage_filtered.info --output-directory lcov

        Transforming C++ ABI identifiers (like RTTI symbols) into the original C++ source identifiers is called “demangling.”

        genhtml: This is the command-line tool for generating HTML reports from coverage data.
        --demangle-cpp: This option instructs genhtml to demangle C++ symbol names in the generated HTML report. Demangling converts mangled symbol names back into their original human-readable form, making the report more understandable.
        coverage_filtered.info: This specifies the input coverage information file from which to generate the HTML report. It seems like this file contains filtered coverage information, likely generated by lcov with some data removed.
        --output-directory lcov: This option specifies the output directory where the generated HTML report will be stored. In this case, it will be stored in a directory named lcov.

    So, putting it all together, this command generates an HTML report from the filtered coverage information stored in the coverage_filtered.info file, demangles C++ symbol names in the report, and saves the report in the lcov directory.

SOURCE : 
https://manpages.ubuntu.com/manpages/xenial/man1/lcov.1.html

POSSIBLE ERRORS : 

ISSUE : 
    make -DCMAKE_BUILD_TYPE=Coverage
    CMake Warning:
    No source or binary directory provided.  Both will be assumed to be the
    same as the current working directory, but note that this warning will
    become a fatal error in future CMake releases.


    CMake Error at CodeCoverage.cmake:175 (check_c_compiler_flag):
    Unknown CMake command "check_c_compiler_flag".
    Call Stack (most recent call first):
    CMakeLists.txt:6 (include)

FIX : 
    Add in file CodeCoverage.cmake include(CheckCCompilerFlag)



DOXYGEN : 
sudo apt-get install doxygen 

To generate doxygen information :
doxygen Doxyfile

To generate doxygen configuration file : 
doxygen -g <config-file>

https://www.star.bnl.gov/public/comp/sofi/doxygen/docblocks.html
